Data Extraction, Conversational AI, and Visualization
This case study is designed to assess your technical skills and ability to build a data-
driven application with conversational AI capabilities. You will be challenged to extract information, build a us
er interface, and integrate with OpenAI&#39;s language models.
Project Overview:
The goal of this project is to create a web application that can answer questions about ABB
Bank based on information extracted from its official website. The application will leverage OpenAI&#39;s GPT mo
del to provide contextually relevant answers to user inquiries.
Technical Requirements:
1. Web Scraping:
o Develop a script to parse the official ABB website and extract all textual content.
2. Web Application Development:
o Build a web application with the following functionalities:

Data Upload: Allow users to upload the extracted data and store it in the browser&#39;s
 local storage.
 OpenAI Integration:
 Implement a backend service that interacts with one of OpenAI LLM model.

Format the extracted data into a suitable vector database format (framework
 of your choice) compatible with OpenAI&#39;s requirements.

 Conversational Interface:

Upon successful data processing, display a chat interface where users can as
k questions.

Ensure questions are answered within the context of the provided ABB infor
mation.

Implement microservice architecture for question handling and response gen
eration using JSON format.
 Store questions, answers, and timestamps in a database.

3. Data Visualization:
o
Utilize a charting library to visualize the stored questions and answers, providing insights into
 user interactions.
4. Containerization:
o
Package the application and its dependencies into a Docker image for portability and easy de
ployment.

Timeline:
You have one week to complete this case study.
Evaluation Criteria:
Your submission will be evaluated based on the following factors:
 Functionality: The application should meet the specified requirements and function as intended.
 Code Quality: The code should be clean, well-structured, and easy to understand.
 Efficiency: The application should be efficient in terms of resource utilization and response times.
 Design: The user interface should be intuitive and user-friendly.